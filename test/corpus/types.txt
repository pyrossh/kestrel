================================================================================
Types
================================================================================

module palm

type User(a) {
  Guest
  LoggedIn(name: a, age: Int)
}

type Result(a, b) {
  Ok(a)
  Error(b)
}

struct Cat[a](
  firstName: String
  middleName: String
  lastName: String
  age: Int
  shape: a
  call: fn (String) -> String
)

fn is_before(year: Int) -> Bool
  year < start_year

fn is_during(year: Int) -> Bool:
  start_year <= year && year <= end_year

var a = arr
  .map { it * 2 }
  .filter { it > 10 }
  .reduce { acc, n -> acc + n}, 0

Row(
  alignment: 1,
  Container(
    H1("123")
      .color(Yellow)
  )
)

<row align={1}>
  <h1 color={Yellow}>
    123
  </h1>
</row>

struct Cat[a] {
  var firstName: str
  var middleName: str
  var lastName: str
  var age: Int
  var shape: a
  var call: fn (String) -> String

  fn talk() {
    puts("meow")
  }

  fn walk() {
    puts("walking")
  }
}

--------------------------------------------------------------------------------

(source_file
  (module
    (module_name))
  (enum
    (type_identifier)
    (generics
      (generic))
    (type_identifier)
    (type_identifier)
    (field
      (identifier)
      (generic))
    (field
      (identifier)
      (type
        (type_identifier))))
  (enum
    (type_identifier)
    (generics
      (generic)
      (generic))
    (type_identifier)
    (identifier)
    (type_identifier)
    (identifier))
  (struct
    (type_identifier)
    (generics
      (generic))
    (field
      (identifier)
      (ERROR)
      (type
        (type_identifier)))
    (field
      (identifier)
      (ERROR)
      (type
        (type_identifier)))
    (field
      (identifier)
      (ERROR)
      (type
        (type_identifier)))
    (field
      (identifier)
      (type
        (type_identifier)))
    (field
      (identifier)
      (generic))
    (field
      (identifier)
      (function_type
        (function_parameter_types
          (type
            (type_identifier)))
        (return_type
          (type
            (type_identifier)))))))
