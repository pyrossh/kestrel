data.price?.take_if(|a| a != "")

trait HasEq[A](
  fn eq(that: a): bool
)

trait Equatable[A]
  `A trait that defines equal and not equal operations

  fn eq(b: Equatable[A]): bool
  fn ne(b: Equatable[A]): bool
end

enum Compare
  | Less
  | Equal
  | Greater
end

trait Comparable[A] is Equatable[A]
  fn lt(that: A): bool
  fn le(that: A): bool 
  fn ge(that: A): bool
  fn gt(that: A): bool
  fn compare(that: a): Compare
end

enum list<T> =
  | empty
  | link(v: T, rest: list<T>)

fn list.of[A](values: ...A): list[A] =
  list[A]().add(values)

fn (o list<T>) each(cb: fn(v: T)) =
  match o
    empty -> return
    link(a, rest) ->
      cb(a)
      rest.each(cb)

fn (l: list) append(values: ...V) =
  `adds the specified elements to the start of the list
  range(values) |v|
    l.add(v)

fn (l: list) append(v: V) =
  `adds the specified elements to the start of the list
  l.last().rest = link(v, empty)

fn (l: list) prepend(v: V) =
  `adds the specified elements to the start of the list
  l.first() = link(v, l.first())


(1 + 2).mod(3).pow(2).sqrt()

math.sqrt(math.pow(math.mod(1 + 2, 3), 2))

if v == none
  error.Error
else
  c * 20

if v == None
  error.Error 
else 
  Some(c) := v
  c * 20

match v
  None -> return error.Error 
  Some(c) ->
    return c * 20

`derive implements this func
`Derive is a compiler plugin/generator similar to dart
`which runs automatically. Its not a macro more like a decorator.
fn UserData.fromJsonStr(data: str): UserData | JsonParseError =
  // JsonParseError(line: line, pos: post, object: "UserData")
  pass

type FetchDataError =  FetchError | IOError |  JsonParseError

fn fetch_data(route: str): map[str, any] | UserData | FetchError | IOError |  JsonParseError =
  res := fetch(route)?
  data := res.body.read_all()?
  parse_json(data)?