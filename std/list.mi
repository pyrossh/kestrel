module std

// A list is a data structure describing a contiguous section of an array stored separately from the slice variable itself.
// A list is not an array. A list describes a piece of an array.  A list is immutable.
record list<V>(_ptr: *V): ToStr

  new create<V>(ptr: *V)
    _ptr = ptr

  fn concat(): slice<V> =
    pass

  fn length(): int =
    len := 0
    while *_ptr != 0x00
      len += 1
      _ptr += 1
    len

  fn each(cb: fn(v: V): void): void =
    while *_ptr != 0x00
      cb(@CastTo(_ptr, V))
      _ptr += @SizeOf(V)

  fn map<A>(cb: fn(v: V): A): []A =
    res := []V
    while *_ptr != 0x00
      res.append(cb(@CastTo(_ptr, V)))
      _ptr += @SizeOf(V)
    res

  fn to_str() =
    res := ""
    each<str>(|v| =
      if @HasTrait(V, ToStr)
        res.write(v.to_str())
      else
        res.write(@TypeToString(v))
    )
