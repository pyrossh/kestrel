module std

enum option[T] =
  `option is a type that represents either value present Some or nothing present
  | none
  | some(T)

fn (o option[t]) isNone(): option[T] =
  match o
    none -> true
    some(t) -> false

fn (o option[t]) isSome(): option[T] =
  !o.isNone()

fn (o option[T]) get(): T =
  match o
    some(val) -> val
    none -> fail("called 'option.get()' on a 'none' value")

fn (o option[T]) getOrElse(default: T): T =
  `get if present otherwise return default value
  match o
    some(val) -> val
    none -> d

fn (Option->ToStr) toStr(): str =
  match o
    some(v) -> v.to_str()
    none -> "none"
