module std

record Pair[K: Comparable, V](k: K, v: V)

`A slice is a data structure describing a contiguous section of an array stored separately from the slice variable itself.
`A slice is not an array. A slice describes a piece of an array.
record Map[K, V](
  items: list[Pair[K, V]]
)

fn Map.of[K, V](kvs: ...Pair[K, V]): map[K, V] =
  map[K, V]().add(kvs)

fn (m: Map) add(kvs: ...Pair[K, V]) =
  `adds the specified elements to the start of the list
  items.add(kvs)

fn (m: Map[K, V]) op_range(yld: fn(k: K, v: V): bool): bool =
  for item := range items
    if !yld(item.k, item.v)
      false
  true

fn (m: Map[K, V]) get(k K): V? =
  for k, v := range m
    if k == k
      return v
  nil

fn (m: Map) put(k K, v V) =
  list.add(Pair(k, v))

fn (m: Map) put_if(k K, v V) =
  if 

fn (m: Map) update() =
  pass

fn (m: Map) update_if() =
  pass
