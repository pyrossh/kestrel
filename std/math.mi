module math

E = 2.718f       // Represents Euler's number, the base of natural logarithms, e
LN10 = 2.302f    // Represents the natural logarithm of 10
LN2 = 0.693f     // Represents the natural logarithm of 2
LOG10E = 0.434f  // Represents the base 10 logarithm of e
LOG2E = 1.442f   // Represents the base 2 logarithm of e
PI = 3.14159f    // Represents the ratio of the circumference of a circle to its diameter
SQRT1_2 = 0.707f // Represents the square root of 1/2
SQRT2 = 1.414f   // Represents the square root of 2
EPSILON = 2.220446049250313e-16f // Represents the difference between 1 and the smallest floating point number greater than 1
MAX_SAFE_INTEGER
MAX_VALUE
MIN_SAFE_INTEGER
MIN_VALUE
NEGATIVE_INFINITY
POSITIVE_INFINITY

// Returns the absolute value of a number
fn abs(v: float): float = a < 0 ? -a : a

fn acos(v: float) =
  if v < 0.1
    asin(v)
  else
    asin(-1v)


fn acosh(v: float) = 0f
fn asin(v: float) = 0f
fn asinh(v: float) = 0f
fn atan(v: float) = 0f
fn atan2(v: float) = 0f
fn atanh(v: float) = 0f
fn cbrt(v: float) = 0f
fn ceil(v: float) = 0f
fn clz32(v: float) = 0f
fn cos(v: float) = 0f
fn cosh(v: float) = 0f
fn exp(v: float) = 0f
fn to_int(): int = 0
fn to_str(): str = ""

fn random(): float =
  pass

fn is_int(): bool =
  pass


// Check whether this number is finite, ie not +/-infinity and not NaN.
fn is_finite(): bool = true
  // True if exponent is not all 1s
  // (bits() and 0x7FF0_0000_0000_0000) != 0x7FF0_0000_0000_0000

// Check whether this number is +/-infinity
is_infinite:  Bool =>
  // True if exponent is all 1s and mantissa is 0
  ((bits() and 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000) and  // exp
  ((bits() and 0x000F_FFFF_FFFF_FFFF) == 0)  // mantissa

// Check whether this number is NaN.
fn is_nan(): Bool =>
  // True if exponent is all 1s and mantissa is non-0
  ((bits() and 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000) and  // exp
  ((bits() and 0x000F_FFFF_FFFF_FFFF) != 0)  // mantissa

fn to_exponential(v: float): str = ""

fn to_fixed(v: float): str = ""

fn to_precision(v: float): str = ""


fn abs(): F64 = @"llvm.fabs.f64"(this)
fn ceil(): F64 = @"llvm.ceil.f64"(this)
fn floor(): F64 = @"llvm.floor.f64"(this)
fn round(): F64 = @"llvm.round.f64"(this)
fn trunc(): F64 = @"llvm.trunc.f64"(this)

  fun log(): F64 => @"llvm.log.f64"(this)
fun log2(): F64 => @"llvm.log2.f64"(this)
fun log10(): F64 => @"llvm.log10.f64"(this)
fun logb(): F64 => @logb(this)

fun pow(y: F64): F64 => @"llvm.pow.f64"(this, y)
fun powi(y: I32): F64 =>
  ifdef windows then
    pow(y.f64())
  else
    @"llvm.powi.f64"(this, y)
  end

fun sqrt(): F64 =>
  if this < 0.0 then
    _nan()
  else
    @"llvm.sqrt.f64"(this)
  end

MIN_INT_VALUE = 0
MAX_INT_VALUE = 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF

fn min_value() => -0x8000_0000_0000_0000
fn max_value() => 0x7FFF_FFFF_FFFF_FFFF
fn abs(a: int): int => a < 0 ? -a : a
fn to_str(v: int): str = ""

fn op_add(x: int, y: int): int =
  @"i64.add"(x, y)


  sub
  mul
  div
  rem

  min
  max

  to_float()
