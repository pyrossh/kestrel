module std

trait Error(
  `This is used to represent an error value across the language
  fn code(): int
  fn msg(): str
  fn cause(): Option[Error]
)

enum result[T, E: Error = Error]
  `result is a type that represents either success ok or failure err.
  | ok(T)
  | err(E)

fn (r result) isOk(): bool =
  match o
    ok(v) -> true
    err(e) -> false

fn (r result) isErr(): bool =
  !o.is_ok()

fn (r result) get(): T =
  match o
    ok(v) -> v
    err(e) -> crash("called `result.get()` on a `none` value")

fn (r result) getOrElse(d: T): T =
  match o
    ok(v) -> v
    err(e) -> d

fn (r result) map(cb: fn(v: T)): result =
  match o
    ok(v) -> cb(v)
    err(e) -> r

fn (r result) mapErr(cb: fn(e: error)): result =
  match o
    ok(v) -> r
    err(e) -> cb(v)
